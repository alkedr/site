как steam, только для фильмов

покупка фильмов, аудиодорожек, субтитров и пр.
скачивание через торренты в разных форматах и качестве
фанатские аудиодорожки и субтитры (в т. ч. и платные)
официальные торренты:
	туда добавляются только лучшие дорожки/сабы/...
	все сочетания качества/дорожек/сабов
	генерируются на наших серверах



new-style daemons
	http://0pointer.de/public/systemd-man/sd-daemon.html

daemon:
	accepts connections
	epolls accepted connections
	(each request has requestId)
	reads request syncroneously
	processes and writes answer asyncroneously

	thread accepter accepts incoming connections and adds them to epollFD
	thread epoller epolls active connections, reads requests and puts them in the queue
	thread worker takes request from queue, processes it and writes response asyncroneously


data daemon:
	stores a collection of items
	can save
	can load FAST (meaning it doesn't have to load everything to start executing requests)

	class DataDaemon:
		config: load/save dirs

		template class Data:
			map<ItemId, Item> incapsulated
			methods:
				ScopedReadLock<Item> lockRead(ItemId) const;
				ScopedWriteLock lockWrite(ItemId);
			(allows not to store all database in memory)
	


data daemon protocol (DDP):
	rpc protocol
	NOT persistent connections
	one connection - one request - one response
	all requests and responses have a field 'responseId' (it allows to send responses in any order, slow requests won't interfere with others)

	request format:
		uint16_t method;
		uint16_t requestId;
		uint32_t dataLength;
		... data ...

	response format:
		uint16_t errorCode;  // 0 - all good
		uint16_t requestId;
		uint32_t dataLength;
		... data ...

	serializing of requests:
		constant-length data first (including lengths of variable-length data)
		variable-length data
	
	generated:
		class name::Interface::StructName
			(structures that appear in requests's parameters and return values more than once [like User, Comment etc])
			serialization/deserialization code

		class name::Interface::RequestName::Request and class name::Interface::RequestName::Response
			inherit data daemons protocol's headers
			serialization/deserialization code

		class name::Interface:
			all methods of daemon (with parameters and return values) as pure virtual methods

	hand-written:
		protocol definition file
		class name::Daemon inherits name::Interface and overrides pure virtual methods with methods that do actual work
		class name::Client inherits name::Interface and overrides pure virtual methods with methods that send request to daemon and wait for response


templater:

вставка значения переменной, foreach, include


preprocessor:
	replaces $a with  )" + a + R"(
	replaces $(foreaсh) with )" + foreach + R"(
	replaces $foreach(item : container) with )"; for (const auto & item : container) { res += R"(
	replaces $end with )"; } R"(
	replaces $include(file.htmlt) with content of that file and preprocesses it
	replaces $include(file.<any other extension>) with content of that file but doesn't preprocess it

	uses  R"<16chars>( ... )<16chars>"
	finds 16chars that aren't substring of template
	to insert dollar sign use &#38;
	doesn't replace between < and >
	doesn't replace between $raw( and )
