как steam, только для фильмов

покупка фильмов, аудиодорожек, субтитров и пр.
скачивание через торренты в разных форматах и качестве
фанатские аудиодорожки и субтитры (в т. ч. и платные)
официальные торренты:
	туда добавляются только лучшие дорожки/сабы/...
	все сочетания качества/дорожек/сабов
	генерируются на наших серверах



new-style daemons
	http://0pointer.de/public/systemd-man/sd-daemon.html

data daemon:
	stores a collection of items
	can save
	can load FAST (meaning it doesn't have to load everything to start executing requests)

	class DataDaemon:
		config: load/save dirs

		template class Data:
			map<ItemId, Item> incapsulated
			methods:
				ScopedReadLock<Item> lockRead(ItemId) const;
				ScopedWriteLock lockWrite(ItemId);
			(allows not to store all database in memory)
	


data daemon protocol (DDP):
	rpc protocol
	NOT persistent connections
	one connection - one request - one response
	all requests and responses have a field 'responseId' (it allows to send responses in any order, slow requests won't interfere with others)

	request format:
		uint16_t method;
		uint16_t requestId;
		uint32_t dataLength;
		... data ...

	response format:
		uint16_t errorCode;  // 0 - all good
		uint16_t requestId;
		uint32_t dataLength;
		... data ...

	serializing of requests:
		constant-length data first (including lengths of variable-length data)
		variable-length data
	
	generated:
		class name::Interface::StructName
			(structures that appear in requests's parameters and return values more than once [like User, Comment etc])
			serialization/deserialization code

		class name::Interface::RequestName::Request and class name::Interface::RequestName::Response
			inherit data daemons protocol's headers
			serialization/deserialization code

		class name::Interface:
			all methods of daemon (with parameters and return values) as pure virtual methods

	hand-written:
		protocol definition file
		class name::Daemon inherits name::Interface and overrides pure virtual methods with methods that do actual work
		class name::Client inherits name::Interface and overrides pure virtual methods with methods that send request to daemon and wait for response

